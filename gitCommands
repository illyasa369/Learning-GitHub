git config --global user.name "userName"
git config --global user.name 

git config --global user.email "userEmail"
git config --global user.email

git config --global core.autocrlf true || Normalise line endings 

# Setting up SSH keys 
ssh-keygen -t ed25519 -C "userEmail"
Add new SSH Key to GitHub account via GitHub website.
Clone using sshURL

# Cloning a repository
git clone repositoryURL

# Adding/Removing files from a repository, restoring the file
git add/rm FILE || Moves FILE to staging area to be committed and pushed.
git restore --staged FILE || Returns staged file to the working directory.

# Committing
git commit -m "COMMIT MESSAGE"

# Pushing changes
git push

# Pulling changes
git pull || Always use after pushing to keep local repository up to date with remote repository.

git status

# Viewing current repository, updating a repository
git remote -v || Shows current repository that is linked to your local project.
git remote set-url origin repositoryURL || Update remote repository linked to your local project.


# Removing a repository
rm -rf .git || Removes git repository but keeps its files.
rm -rf [FOLDER] || Removes git repository.

# Branching
git branch || Shows the current branch
git branch BRANCH || Creates a new branch
git checkout BRANCH || Switches local branch to the new branch
git push --set-upstream origin BRANCH || Sets the remote branch to be tracked

# Deleting branches
git branch -d BRANCH || Deletes a branch locally
git push origin --delete BRANCH || Deletes the branch remotely
git remote prune origin || Clean up deleted remote branches.

# Updating a branch with any changes from main
git pull origin main

# Merging
1. Switch to main branch
git pull origin main ||  Pull from main to ensure it is up to date.
git merge BRANCH || Merge feature branch in to current branch (main).
git push origin main || Push to remote main.

# Tags
git log --oneline || Shows commit logs with oneline.
git tag [TAGNAME] [COMMITHASH] || Tags the specified commit.
git push origin TAGNAME || Pushes tags to remote repository.

#Rebasing
git checkout feature-branch
git rebase main 

Conflicts during rebasing:
Rebasing will pause until the conflict has been resolved.
Once fixed:
git add file || Add the file with the changes.
git rebase --continue || Git continues with the rebase.
git push --force-with-lease || Push safely if remote is unchanged, fails if not.

# Squashing Commits
git rebase -i HEAD~n || Interactively rebase to the last n commits.

An editor will open:
1. Keep first commit as pick.
2. All remaining commits to be squashed should be changed to squash.
3. Save and close editor.

A second editor will open allowing you to refactor the commit message.
1. Keep the first commit message.
2. Remove or comment out the additional commit messages.
3. Save and close editor.
